-----Command to clean data-----
db.dirtydataset.find({}, {play_type: true, yards_gained:true, interception:true, fumble_lost:true,rush_attempt:true,pass_attempt:true,pass_touchdown:true,rush_touchdown:true,passer_player_id:true,passer_player_name:true,reciever_player_id:true,reciever_player_name:true,rusher_player_id:true,rusher_player_name:true } ).forEach(function(x){db.cleandata.insert(x);})

-----MapReduce-----
var mapFunction1 = function() {
	var value = {
		touchdown: 0,
		yards: parseInt(this.yards_gained),
		IsQB: false
	}
	if(this.playtype == "run"){
		value.touchdown = parseInt(this.rush_touchdown);
        	emit(this.rusher_player_name, value);
	}
	if(this.playtype == "pass"){
		value.touchdown = parseInt(this.pass_touchdown);
                emit(this.reciever_player_name,value);
		value.IsQB = true;
		emit(this.passer_player_name,value);
	}
 };

var reduceFunction1 = function(name, vals) {
        reducedVal = { totalTouchdowns: 0, totalYards: 0, IsQB: vals.IsQB};

        for (var idx = 0; idx < countObjVals.length; idx++) {
                         reducedVal.totalTouchdowns += vals[idx].touchdown;
                         reducedVal.totalYards += vals[idx].yards;
                     }

        return reducedVal;
};


var finalizeFunction1 = function (name, vals) {

        var result = {name:name,points:0};
	if(!vals.IsQB){
		result.points += Math.floor(vals.totalYards / 10);
		result.points += vals.totalTouchdowns * 6;
	}else{
		result.points += Math.floor(vals.totalYards / 25);
		result.points += vals.totalTouchdowns * 4;
	}	
        return result;

};


db.cleandata.mapReduce(
	mapFunction1,
	reduceFunction1,
	{
		out: {merge: "players_points"},
		sort: {points: -1},
		finalize: finalizeFunction1
	
	}
)
